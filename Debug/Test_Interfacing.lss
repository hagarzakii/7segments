
Test_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00001afe  00001b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007a  0080007a  00001bac  2**0
                  ALLOC
  3 .stab         0000144c  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000db6  00000000  00000000  00002ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00003eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000405e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007940  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000084fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__vector_1>
       8:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 0c 	call	0x188a	; 0x188a <main>
      8a:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enumSetPinDirection>:
#include "DIO_private.h"
#include "DIO_interface.h"
#include "DIO_config.h"

DIO_ErrorStatus DIO_enumSetPinDirection (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus Loc_state = DIO_OK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD && Copy_u8PIN <= DIO_PIN7)
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	84 30       	cpi	r24, 0x04	; 4
     b68:	08 f0       	brcs	.+2      	; 0xb6c <DIO_enumSetPinDirection+0x26>
     b6a:	f1 c0       	rjmp	.+482    	; 0xd4e <DIO_enumSetPinDirection+0x208>
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	88 30       	cpi	r24, 0x08	; 8
     b70:	08 f0       	brcs	.+2      	; 0xb74 <DIO_enumSetPinDirection+0x2e>
     b72:	ed c0       	rjmp	.+474    	; 0xd4e <DIO_enumSetPinDirection+0x208>
	{
		if(Copy_u8Direction == DIO_PIN_OUTPUT)
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	09 f0       	breq	.+2      	; 0xb7c <DIO_enumSetPinDirection+0x36>
     b7a:	6f c0       	rjmp	.+222    	; 0xc5a <DIO_enumSetPinDirection+0x114>
		{
		switch(Copy_u8PORT)
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	38 87       	std	Y+8, r19	; 0x08
     b84:	2f 83       	std	Y+7, r18	; 0x07
     b86:	8f 81       	ldd	r24, Y+7	; 0x07
     b88:	98 85       	ldd	r25, Y+8	; 0x08
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	91 05       	cpc	r25, r1
     b8e:	49 f1       	breq	.+82     	; 0xbe2 <DIO_enumSetPinDirection+0x9c>
     b90:	2f 81       	ldd	r18, Y+7	; 0x07
     b92:	38 85       	ldd	r19, Y+8	; 0x08
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	2c f4       	brge	.+10     	; 0xba4 <DIO_enumSetPinDirection+0x5e>
     b9a:	8f 81       	ldd	r24, Y+7	; 0x07
     b9c:	98 85       	ldd	r25, Y+8	; 0x08
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	61 f0       	breq	.+24     	; 0xbba <DIO_enumSetPinDirection+0x74>
     ba2:	d6 c0       	rjmp	.+428    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
     ba4:	2f 81       	ldd	r18, Y+7	; 0x07
     ba6:	38 85       	ldd	r19, Y+8	; 0x08
     ba8:	22 30       	cpi	r18, 0x02	; 2
     baa:	31 05       	cpc	r19, r1
     bac:	71 f1       	breq	.+92     	; 0xc0a <DIO_enumSetPinDirection+0xc4>
     bae:	8f 81       	ldd	r24, Y+7	; 0x07
     bb0:	98 85       	ldd	r25, Y+8	; 0x08
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	e9 f1       	breq	.+122    	; 0xc32 <DIO_enumSetPinDirection+0xec>
     bb8:	cb c0       	rjmp	.+406    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
		{
			case DIO_PORTA : SET_BIT(DDRA_Register,Copy_u8PIN);
     bba:	aa e3       	ldi	r26, 0x3A	; 58
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea e3       	ldi	r30, 0x3A	; 58
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	48 2f       	mov	r20, r24
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 2e       	mov	r0, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_enumSetPinDirection+0x92>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_enumSetPinDirection+0x8e>
     bdc:	84 2b       	or	r24, r20
     bde:	8c 93       	st	X, r24
     be0:	b7 c0       	rjmp	.+366    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			break;
			case DIO_PORTB : SET_BIT(DDRB_Register,Copy_u8PIN);
     be2:	a7 e3       	ldi	r26, 0x37	; 55
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e7 e3       	ldi	r30, 0x37	; 55
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	48 2f       	mov	r20, r24
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 2e       	mov	r0, r18
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <DIO_enumSetPinDirection+0xba>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	0a 94       	dec	r0
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <DIO_enumSetPinDirection+0xb6>
     c04:	84 2b       	or	r24, r20
     c06:	8c 93       	st	X, r24
     c08:	a3 c0       	rjmp	.+326    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			break;
			case DIO_PORTC : SET_BIT(DDRC_Register,Copy_u8PIN);
     c0a:	a4 e3       	ldi	r26, 0x34	; 52
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e4 e3       	ldi	r30, 0x34	; 52
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <DIO_enumSetPinDirection+0xe2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <DIO_enumSetPinDirection+0xde>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	8f c0       	rjmp	.+286    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			break;
			case DIO_PORTD : SET_BIT(DDRD_Register,Copy_u8PIN);
     c32:	a1 e3       	ldi	r26, 0x31	; 49
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e1 e3       	ldi	r30, 0x31	; 49
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_enumSetPinDirection+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_enumSetPinDirection+0x106>
     c54:	84 2b       	or	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	7b c0       	rjmp	.+246    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			break;}

		}
		else if(Copy_u8Direction == DIO_PIN_INPUT)
     c5a:	8c 81       	ldd	r24, Y+4	; 0x04
     c5c:	88 23       	and	r24, r24
     c5e:	09 f0       	breq	.+2      	; 0xc62 <DIO_enumSetPinDirection+0x11c>
     c60:	74 c0       	rjmp	.+232    	; 0xd4a <DIO_enumSetPinDirection+0x204>
		{
			switch(Copy_u8PORT)
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	3e 83       	std	Y+6, r19	; 0x06
     c6a:	2d 83       	std	Y+5, r18	; 0x05
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	91 05       	cpc	r25, r1
     c74:	59 f1       	breq	.+86     	; 0xccc <DIO_enumSetPinDirection+0x186>
     c76:	2d 81       	ldd	r18, Y+5	; 0x05
     c78:	3e 81       	ldd	r19, Y+6	; 0x06
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	2c f4       	brge	.+10     	; 0xc8a <DIO_enumSetPinDirection+0x144>
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	69 f0       	breq	.+26     	; 0xca2 <DIO_enumSetPinDirection+0x15c>
     c88:	63 c0       	rjmp	.+198    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
     c8a:	2d 81       	ldd	r18, Y+5	; 0x05
     c8c:	3e 81       	ldd	r19, Y+6	; 0x06
     c8e:	22 30       	cpi	r18, 0x02	; 2
     c90:	31 05       	cpc	r19, r1
     c92:	89 f1       	breq	.+98     	; 0xcf6 <DIO_enumSetPinDirection+0x1b0>
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	83 30       	cpi	r24, 0x03	; 3
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f4       	brne	.+2      	; 0xca0 <DIO_enumSetPinDirection+0x15a>
     c9e:	40 c0       	rjmp	.+128    	; 0xd20 <DIO_enumSetPinDirection+0x1da>
     ca0:	57 c0       	rjmp	.+174    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : CLR_BIT(DDRA_Register,Copy_u8PIN);
     ca2:	aa e3       	ldi	r26, 0x3A	; 58
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_enumSetPinDirection+0x17a>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <DIO_enumSetPinDirection+0x176>
     cc4:	80 95       	com	r24
     cc6:	84 23       	and	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	42 c0       	rjmp	.+132    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			break;
			case DIO_PORTB : CLR_BIT(DDRB_Register,Copy_u8PIN);
     ccc:	a7 e3       	ldi	r26, 0x37	; 55
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e7 e3       	ldi	r30, 0x37	; 55
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_enumSetPinDirection+0x1a4>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_enumSetPinDirection+0x1a0>
     cee:	80 95       	com	r24
     cf0:	84 23       	and	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	2d c0       	rjmp	.+90     	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			break;
			case DIO_PORTC : CLR_BIT(DDRC_Register,Copy_u8PIN);
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_enumSetPinDirection+0x1ce>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_enumSetPinDirection+0x1ca>
     d18:	80 95       	com	r24
     d1a:	84 23       	and	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	18 c0       	rjmp	.+48     	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			break;
			case DIO_PORTD : CLR_BIT(DDRD_Register,Copy_u8PIN);
     d20:	a1 e3       	ldi	r26, 0x31	; 49
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e1 e3       	ldi	r30, 0x31	; 49
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <DIO_enumSetPinDirection+0x1f8>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <DIO_enumSetPinDirection+0x1f4>
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			break;
			}
		}
		else
		{
			Loc_state = DIO_NOK;
     d4a:	19 82       	std	Y+1, r1	; 0x01
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <DIO_enumSetPinDirection+0x20a>
		}	
	}
	else
	{
		Loc_state = DIO_NOK;
     d4e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Loc_state;
     d50:	89 81       	ldd	r24, Y+1	; 0x01
}
     d52:	28 96       	adiw	r28, 0x08	; 8
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <DIO_enumSetPinValue>:



DIO_ErrorStatus DIO_enumSetPinValue (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	28 97       	sbiw	r28, 0x08	; 8
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	6b 83       	std	Y+3, r22	; 0x03
     d7c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus Loc_state = DIO_OK;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD && Copy_u8PIN <= DIO_PIN7)
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	84 30       	cpi	r24, 0x04	; 4
     d86:	08 f0       	brcs	.+2      	; 0xd8a <DIO_enumSetPinValue+0x26>
     d88:	f1 c0       	rjmp	.+482    	; 0xf6c <DIO_enumSetPinValue+0x208>
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	88 30       	cpi	r24, 0x08	; 8
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <DIO_enumSetPinValue+0x2e>
     d90:	ed c0       	rjmp	.+474    	; 0xf6c <DIO_enumSetPinValue+0x208>
	{
		if(Copy_u8Value == DIO_PIN_HIGH)
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	09 f0       	breq	.+2      	; 0xd9a <DIO_enumSetPinValue+0x36>
     d98:	6f c0       	rjmp	.+222    	; 0xe78 <DIO_enumSetPinValue+0x114>
		{
		switch(Copy_u8PORT)
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	38 87       	std	Y+8, r19	; 0x08
     da2:	2f 83       	std	Y+7, r18	; 0x07
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	98 85       	ldd	r25, Y+8	; 0x08
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	91 05       	cpc	r25, r1
     dac:	49 f1       	breq	.+82     	; 0xe00 <DIO_enumSetPinValue+0x9c>
     dae:	2f 81       	ldd	r18, Y+7	; 0x07
     db0:	38 85       	ldd	r19, Y+8	; 0x08
     db2:	22 30       	cpi	r18, 0x02	; 2
     db4:	31 05       	cpc	r19, r1
     db6:	2c f4       	brge	.+10     	; 0xdc2 <DIO_enumSetPinValue+0x5e>
     db8:	8f 81       	ldd	r24, Y+7	; 0x07
     dba:	98 85       	ldd	r25, Y+8	; 0x08
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	61 f0       	breq	.+24     	; 0xdd8 <DIO_enumSetPinValue+0x74>
     dc0:	d6 c0       	rjmp	.+428    	; 0xf6e <DIO_enumSetPinValue+0x20a>
     dc2:	2f 81       	ldd	r18, Y+7	; 0x07
     dc4:	38 85       	ldd	r19, Y+8	; 0x08
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	71 f1       	breq	.+92     	; 0xe28 <DIO_enumSetPinValue+0xc4>
     dcc:	8f 81       	ldd	r24, Y+7	; 0x07
     dce:	98 85       	ldd	r25, Y+8	; 0x08
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	91 05       	cpc	r25, r1
     dd4:	e9 f1       	breq	.+122    	; 0xe50 <DIO_enumSetPinValue+0xec>
     dd6:	cb c0       	rjmp	.+406    	; 0xf6e <DIO_enumSetPinValue+0x20a>
		{
			case DIO_PORTA : SET_BIT(PORTA_Register,Copy_u8PIN);
     dd8:	ab e3       	ldi	r26, 0x3B	; 59
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	eb e3       	ldi	r30, 0x3B	; 59
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_enumSetPinValue+0x92>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_enumSetPinValue+0x8e>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	b7 c0       	rjmp	.+366    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			break;
			case DIO_PORTB : SET_BIT(PORTB_Register,Copy_u8PIN);
     e00:	a8 e3       	ldi	r26, 0x38	; 56
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e3       	ldi	r30, 0x38	; 56
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_enumSetPinValue+0xba>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_enumSetPinValue+0xb6>
     e22:	84 2b       	or	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	a3 c0       	rjmp	.+326    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			break;
			case DIO_PORTC : SET_BIT(PORTC_Register,Copy_u8PIN);
     e28:	a5 e3       	ldi	r26, 0x35	; 53
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e5 e3       	ldi	r30, 0x35	; 53
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_enumSetPinValue+0xe2>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_enumSetPinValue+0xde>
     e4a:	84 2b       	or	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	8f c0       	rjmp	.+286    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			break;
			case DIO_PORTD : SET_BIT(PORTD_Register,Copy_u8PIN);
     e50:	a2 e3       	ldi	r26, 0x32	; 50
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e2 e3       	ldi	r30, 0x32	; 50
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_enumSetPinValue+0x10a>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_enumSetPinValue+0x106>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	7b c0       	rjmp	.+246    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			break;
		}
		}
		else if(Copy_u8Value == DIO_PIN_LOW)
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	88 23       	and	r24, r24
     e7c:	09 f0       	breq	.+2      	; 0xe80 <DIO_enumSetPinValue+0x11c>
     e7e:	74 c0       	rjmp	.+232    	; 0xf68 <DIO_enumSetPinValue+0x204>
		{
			switch(Copy_u8PORT)
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	3e 83       	std	Y+6, r19	; 0x06
     e88:	2d 83       	std	Y+5, r18	; 0x05
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	91 05       	cpc	r25, r1
     e92:	59 f1       	breq	.+86     	; 0xeea <DIO_enumSetPinValue+0x186>
     e94:	2d 81       	ldd	r18, Y+5	; 0x05
     e96:	3e 81       	ldd	r19, Y+6	; 0x06
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <DIO_enumSetPinValue+0x144>
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f0       	breq	.+26     	; 0xec0 <DIO_enumSetPinValue+0x15c>
     ea6:	63 c0       	rjmp	.+198    	; 0xf6e <DIO_enumSetPinValue+0x20a>
     ea8:	2d 81       	ldd	r18, Y+5	; 0x05
     eaa:	3e 81       	ldd	r19, Y+6	; 0x06
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	89 f1       	breq	.+98     	; 0xf14 <DIO_enumSetPinValue+0x1b0>
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_enumSetPinValue+0x15a>
     ebc:	40 c0       	rjmp	.+128    	; 0xf3e <DIO_enumSetPinValue+0x1da>
     ebe:	57 c0       	rjmp	.+174    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : CLR_BIT(PORTA_Register,Copy_u8PIN);
     ec0:	ab e3       	ldi	r26, 0x3B	; 59
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	eb e3       	ldi	r30, 0x3B	; 59
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_enumSetPinValue+0x17a>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_enumSetPinValue+0x176>
     ee2:	80 95       	com	r24
     ee4:	84 23       	and	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	42 c0       	rjmp	.+132    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			break;
			case DIO_PORTB : CLR_BIT(PORTB_Register,Copy_u8PIN);
     eea:	a8 e3       	ldi	r26, 0x38	; 56
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e3       	ldi	r30, 0x38	; 56
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_enumSetPinValue+0x1a4>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_enumSetPinValue+0x1a0>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	2d c0       	rjmp	.+90     	; 0xf6e <DIO_enumSetPinValue+0x20a>
			break;
			case DIO_PORTC : CLR_BIT(PORTC_Register,Copy_u8PIN);
     f14:	a5 e3       	ldi	r26, 0x35	; 53
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e5 e3       	ldi	r30, 0x35	; 53
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_enumSetPinValue+0x1ce>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_enumSetPinValue+0x1ca>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	18 c0       	rjmp	.+48     	; 0xf6e <DIO_enumSetPinValue+0x20a>
			break;
			case DIO_PORTD : CLR_BIT(PORTD_Register,Copy_u8PIN);
     f3e:	a2 e3       	ldi	r26, 0x32	; 50
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e2 e3       	ldi	r30, 0x32	; 50
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_enumSetPinValue+0x1f8>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_enumSetPinValue+0x1f4>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <DIO_enumSetPinValue+0x20a>
			break;
			}
		}
		else
		{
			Loc_state = DIO_NOK;
     f68:	19 82       	std	Y+1, r1	; 0x01
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <DIO_enumSetPinValue+0x20a>
		}	
	}
	else
	{
		Loc_state = DIO_NOK;
     f6c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Loc_state;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f70:	28 96       	adiw	r28, 0x08	; 8
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <DIO_enumGetPinValue>:
DIO_ErrorStatus DIO_enumGetPinValue (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	27 97       	sbiw	r28, 0x07	; 7
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	8a 83       	std	Y+2, r24	; 0x02
     f98:	6b 83       	std	Y+3, r22	; 0x03
     f9a:	5d 83       	std	Y+5, r21	; 0x05
     f9c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus Loc_state = DIO_OK;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD && Copy_u8PIN <= DIO_PIN7)
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	84 30       	cpi	r24, 0x04	; 4
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <DIO_enumGetPinValue+0x28>
     fa8:	75 c0       	rjmp	.+234    	; 0x1094 <DIO_enumGetPinValue+0x112>
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	88 30       	cpi	r24, 0x08	; 8
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <DIO_enumGetPinValue+0x30>
     fb0:	71 c0       	rjmp	.+226    	; 0x1094 <DIO_enumGetPinValue+0x112>
	{
		switch(Copy_u8PORT)
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3f 83       	std	Y+7, r19	; 0x07
     fba:	2e 83       	std	Y+6, r18	; 0x06
     fbc:	4e 81       	ldd	r20, Y+6	; 0x06
     fbe:	5f 81       	ldd	r21, Y+7	; 0x07
     fc0:	41 30       	cpi	r20, 0x01	; 1
     fc2:	51 05       	cpc	r21, r1
     fc4:	59 f1       	breq	.+86     	; 0x101c <DIO_enumGetPinValue+0x9a>
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
     fc8:	9f 81       	ldd	r25, Y+7	; 0x07
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	91 05       	cpc	r25, r1
     fce:	34 f4       	brge	.+12     	; 0xfdc <DIO_enumGetPinValue+0x5a>
     fd0:	2e 81       	ldd	r18, Y+6	; 0x06
     fd2:	3f 81       	ldd	r19, Y+7	; 0x07
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	69 f0       	breq	.+26     	; 0xff4 <DIO_enumGetPinValue+0x72>
     fda:	5d c0       	rjmp	.+186    	; 0x1096 <DIO_enumGetPinValue+0x114>
     fdc:	4e 81       	ldd	r20, Y+6	; 0x06
     fde:	5f 81       	ldd	r21, Y+7	; 0x07
     fe0:	42 30       	cpi	r20, 0x02	; 2
     fe2:	51 05       	cpc	r21, r1
     fe4:	79 f1       	breq	.+94     	; 0x1044 <DIO_enumGetPinValue+0xc2>
     fe6:	8e 81       	ldd	r24, Y+6	; 0x06
     fe8:	9f 81       	ldd	r25, Y+7	; 0x07
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	91 05       	cpc	r25, r1
     fee:	09 f4       	brne	.+2      	; 0xff2 <DIO_enumGetPinValue+0x70>
     ff0:	3d c0       	rjmp	.+122    	; 0x106c <DIO_enumGetPinValue+0xea>
     ff2:	51 c0       	rjmp	.+162    	; 0x1096 <DIO_enumGetPinValue+0x114>
		{
			case DIO_PORTA : *Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN);
     ff4:	e9 e3       	ldi	r30, 0x39	; 57
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a9 01       	movw	r20, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_enumGetPinValue+0x8a>
    1008:	55 95       	asr	r21
    100a:	47 95       	ror	r20
    100c:	8a 95       	dec	r24
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_enumGetPinValue+0x86>
    1010:	ca 01       	movw	r24, r20
    1012:	81 70       	andi	r24, 0x01	; 1
    1014:	ec 81       	ldd	r30, Y+4	; 0x04
    1016:	fd 81       	ldd	r31, Y+5	; 0x05
    1018:	80 83       	st	Z, r24
    101a:	3d c0       	rjmp	.+122    	; 0x1096 <DIO_enumGetPinValue+0x114>
			break;
			case DIO_PORTB : *Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN);
    101c:	e6 e3       	ldi	r30, 0x36	; 54
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a9 01       	movw	r20, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_enumGetPinValue+0xb2>
    1030:	55 95       	asr	r21
    1032:	47 95       	ror	r20
    1034:	8a 95       	dec	r24
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_enumGetPinValue+0xae>
    1038:	ca 01       	movw	r24, r20
    103a:	81 70       	andi	r24, 0x01	; 1
    103c:	ec 81       	ldd	r30, Y+4	; 0x04
    103e:	fd 81       	ldd	r31, Y+5	; 0x05
    1040:	80 83       	st	Z, r24
    1042:	29 c0       	rjmp	.+82     	; 0x1096 <DIO_enumGetPinValue+0x114>
			break;
			case DIO_PORTC : *Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN);
    1044:	e3 e3       	ldi	r30, 0x33	; 51
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a9 01       	movw	r20, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_enumGetPinValue+0xda>
    1058:	55 95       	asr	r21
    105a:	47 95       	ror	r20
    105c:	8a 95       	dec	r24
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_enumGetPinValue+0xd6>
    1060:	ca 01       	movw	r24, r20
    1062:	81 70       	andi	r24, 0x01	; 1
    1064:	ec 81       	ldd	r30, Y+4	; 0x04
    1066:	fd 81       	ldd	r31, Y+5	; 0x05
    1068:	80 83       	st	Z, r24
    106a:	15 c0       	rjmp	.+42     	; 0x1096 <DIO_enumGetPinValue+0x114>
			break;
			case DIO_PORTD : *Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN);
    106c:	e0 e3       	ldi	r30, 0x30	; 48
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	a9 01       	movw	r20, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_enumGetPinValue+0x102>
    1080:	55 95       	asr	r21
    1082:	47 95       	ror	r20
    1084:	8a 95       	dec	r24
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_enumGetPinValue+0xfe>
    1088:	ca 01       	movw	r24, r20
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	ec 81       	ldd	r30, Y+4	; 0x04
    108e:	fd 81       	ldd	r31, Y+5	; 0x05
    1090:	80 83       	st	Z, r24
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <DIO_enumGetPinValue+0x114>
			break;
		}
	}
	else
	{
		Loc_state = DIO_NOK;
    1094:	19 82       	std	Y+1, r1	; 0x01
	}
	return Loc_state;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
}
    1098:	27 96       	adiw	r28, 0x07	; 7
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <DIO_enumTogglePinValue>:
DIO_ErrorStatus DIO_enumTogglePinValue(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <DIO_enumTogglePinValue+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <DIO_enumTogglePinValue+0x8>
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	8a 83       	std	Y+2, r24	; 0x02
    10ba:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Loc_state = DIO_OK;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD && Copy_u8PIN <= DIO_PIN7)
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <DIO_enumTogglePinValue+0x1e>
    10c6:	73 c0       	rjmp	.+230    	; 0x11ae <DIO_enumTogglePinValue+0x104>
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	88 30       	cpi	r24, 0x08	; 8
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <DIO_enumTogglePinValue+0x26>
    10ce:	6f c0       	rjmp	.+222    	; 0x11ae <DIO_enumTogglePinValue+0x104>
	{
		switch(Copy_u8PORT)
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	3d 83       	std	Y+5, r19	; 0x05
    10d8:	2c 83       	std	Y+4, r18	; 0x04
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	91 05       	cpc	r25, r1
    10e2:	49 f1       	breq	.+82     	; 0x1136 <DIO_enumTogglePinValue+0x8c>
    10e4:	2c 81       	ldd	r18, Y+4	; 0x04
    10e6:	3d 81       	ldd	r19, Y+5	; 0x05
    10e8:	22 30       	cpi	r18, 0x02	; 2
    10ea:	31 05       	cpc	r19, r1
    10ec:	2c f4       	brge	.+10     	; 0x10f8 <DIO_enumTogglePinValue+0x4e>
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	9d 81       	ldd	r25, Y+5	; 0x05
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	61 f0       	breq	.+24     	; 0x110e <DIO_enumTogglePinValue+0x64>
    10f6:	5c c0       	rjmp	.+184    	; 0x11b0 <DIO_enumTogglePinValue+0x106>
    10f8:	2c 81       	ldd	r18, Y+4	; 0x04
    10fa:	3d 81       	ldd	r19, Y+5	; 0x05
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	71 f1       	breq	.+92     	; 0x115e <DIO_enumTogglePinValue+0xb4>
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	9d 81       	ldd	r25, Y+5	; 0x05
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	e9 f1       	breq	.+122    	; 0x1186 <DIO_enumTogglePinValue+0xdc>
    110c:	51 c0       	rjmp	.+162    	; 0x11b0 <DIO_enumTogglePinValue+0x106>
		{
			case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    110e:	ab e3       	ldi	r26, 0x3B	; 59
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	eb e3       	ldi	r30, 0x3B	; 59
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_enumTogglePinValue+0x82>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_enumTogglePinValue+0x7e>
    1130:	84 27       	eor	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	3d c0       	rjmp	.+122    	; 0x11b0 <DIO_enumTogglePinValue+0x106>
			break;
			case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    1136:	a8 e3       	ldi	r26, 0x38	; 56
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e8 e3       	ldi	r30, 0x38	; 56
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_enumTogglePinValue+0xaa>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_enumTogglePinValue+0xa6>
    1158:	84 27       	eor	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	29 c0       	rjmp	.+82     	; 0x11b0 <DIO_enumTogglePinValue+0x106>
			break;
			case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    115e:	a5 e3       	ldi	r26, 0x35	; 53
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e3       	ldi	r30, 0x35	; 53
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_enumTogglePinValue+0xd2>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_enumTogglePinValue+0xce>
    1180:	84 27       	eor	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	15 c0       	rjmp	.+42     	; 0x11b0 <DIO_enumTogglePinValue+0x106>
			break;
			case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    1186:	a2 e3       	ldi	r26, 0x32	; 50
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e2 e3       	ldi	r30, 0x32	; 50
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_enumTogglePinValue+0xfa>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_enumTogglePinValue+0xf6>
    11a8:	84 27       	eor	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <DIO_enumTogglePinValue+0x106>
			break;
		}
	}
	else
	{
		Loc_state = DIO_NOK;
    11ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return Loc_state;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <DIO_enumSetPortDirection>:

DIO_ErrorStatus DIO_enumSetPortDirection (u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <DIO_enumSetPortDirection+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <DIO_enumSetPortDirection+0x8>
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Loc_state = DIO_OK;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD)
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	84 30       	cpi	r24, 0x04	; 4
    11dc:	98 f5       	brcc	.+102    	; 0x1244 <DIO_enumSetPortDirection+0x82>
	{
		switch(Copy_u8PORT)
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3d 83       	std	Y+5, r19	; 0x05
    11e6:	2c 83       	std	Y+4, r18	; 0x04
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	d1 f0       	breq	.+52     	; 0x1226 <DIO_enumSetPortDirection+0x64>
    11f2:	2c 81       	ldd	r18, Y+4	; 0x04
    11f4:	3d 81       	ldd	r19, Y+5	; 0x05
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	2c f4       	brge	.+10     	; 0x1206 <DIO_enumSetPortDirection+0x44>
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	61 f0       	breq	.+24     	; 0x121c <DIO_enumSetPortDirection+0x5a>
    1204:	20 c0       	rjmp	.+64     	; 0x1246 <DIO_enumSetPortDirection+0x84>
    1206:	2c 81       	ldd	r18, Y+4	; 0x04
    1208:	3d 81       	ldd	r19, Y+5	; 0x05
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	81 f0       	breq	.+32     	; 0x1230 <DIO_enumSetPortDirection+0x6e>
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	81 f0       	breq	.+32     	; 0x123a <DIO_enumSetPortDirection+0x78>
    121a:	15 c0       	rjmp	.+42     	; 0x1246 <DIO_enumSetPortDirection+0x84>
		{
			case DIO_PORTA : DDRA_Register=Copy_u8Direction;
    121c:	ea e3       	ldi	r30, 0x3A	; 58
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	80 83       	st	Z, r24
    1224:	10 c0       	rjmp	.+32     	; 0x1246 <DIO_enumSetPortDirection+0x84>
			break;
			case DIO_PORTB : DDRB_Register=Copy_u8Direction;
    1226:	e7 e3       	ldi	r30, 0x37	; 55
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	80 83       	st	Z, r24
    122e:	0b c0       	rjmp	.+22     	; 0x1246 <DIO_enumSetPortDirection+0x84>
			break;
			case DIO_PORTC : DDRC_Register=Copy_u8Direction;
    1230:	e4 e3       	ldi	r30, 0x34	; 52
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	80 83       	st	Z, r24
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <DIO_enumSetPortDirection+0x84>
			break;
			case DIO_PORTD : DDRD_Register=Copy_u8Direction;
    123a:	e1 e3       	ldi	r30, 0x31	; 49
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	80 83       	st	Z, r24
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <DIO_enumSetPortDirection+0x84>
			break;
		}
	}
	else
	{
		Loc_state = DIO_NOK;
    1244:	19 82       	std	Y+1, r1	; 0x01
	}
	return Loc_state;
    1246:	89 81       	ldd	r24, Y+1	; 0x01
}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <DIO_enumSetPortValue>:

DIO_ErrorStatus DIO_enumSetPortValue(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <DIO_enumSetPortValue+0x6>
    125e:	00 d0       	rcall	.+0      	; 0x1260 <DIO_enumSetPortValue+0x8>
    1260:	0f 92       	push	r0
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	8a 83       	std	Y+2, r24	; 0x02
    1268:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Loc_state = DIO_OK;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD)
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	98 f5       	brcc	.+102    	; 0x12da <DIO_enumSetPortValue+0x82>
	{
		switch(Copy_u8PORT)
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3d 83       	std	Y+5, r19	; 0x05
    127c:	2c 83       	std	Y+4, r18	; 0x04
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	91 05       	cpc	r25, r1
    1286:	d1 f0       	breq	.+52     	; 0x12bc <DIO_enumSetPortValue+0x64>
    1288:	2c 81       	ldd	r18, Y+4	; 0x04
    128a:	3d 81       	ldd	r19, Y+5	; 0x05
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	2c f4       	brge	.+10     	; 0x129c <DIO_enumSetPortValue+0x44>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	61 f0       	breq	.+24     	; 0x12b2 <DIO_enumSetPortValue+0x5a>
    129a:	20 c0       	rjmp	.+64     	; 0x12dc <DIO_enumSetPortValue+0x84>
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	3d 81       	ldd	r19, Y+5	; 0x05
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	81 f0       	breq	.+32     	; 0x12c6 <DIO_enumSetPortValue+0x6e>
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	91 05       	cpc	r25, r1
    12ae:	81 f0       	breq	.+32     	; 0x12d0 <DIO_enumSetPortValue+0x78>
    12b0:	15 c0       	rjmp	.+42     	; 0x12dc <DIO_enumSetPortValue+0x84>
		{
			case DIO_PORTA : PORTA_Register=Copy_u8Value;
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	80 83       	st	Z, r24
    12ba:	10 c0       	rjmp	.+32     	; 0x12dc <DIO_enumSetPortValue+0x84>
			break;
			case DIO_PORTB : PORTB_Register=Copy_u8Value;
    12bc:	e8 e3       	ldi	r30, 0x38	; 56
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	80 83       	st	Z, r24
    12c4:	0b c0       	rjmp	.+22     	; 0x12dc <DIO_enumSetPortValue+0x84>
			break;
			case DIO_PORTC : PORTC_Register=Copy_u8Value;
    12c6:	e5 e3       	ldi	r30, 0x35	; 53
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	80 83       	st	Z, r24
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <DIO_enumSetPortValue+0x84>
			break;
			case DIO_PORTD : PORTD_Register=Copy_u8Value;
    12d0:	e2 e3       	ldi	r30, 0x32	; 50
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	80 83       	st	Z, r24
    12d8:	01 c0       	rjmp	.+2      	; 0x12dc <DIO_enumSetPortValue+0x84>
			break;
		}
	}
	else
	{
		Loc_state = DIO_NOK;
    12da:	19 82       	std	Y+1, r1	; 0x01
	}
	return Loc_state;
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <DIO_enumGetPortValue>:
DIO_ErrorStatus DIO_enumGetPortValue(u8 Copy_u8PORT, u8 * Copy_PtrData)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <DIO_enumGetPortValue+0x6>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <DIO_enumGetPortValue+0x8>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DIO_enumGetPortValue+0xa>
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	8a 83       	std	Y+2, r24	; 0x02
    12fe:	7c 83       	std	Y+4, r23	; 0x04
    1300:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Loc_state = DIO_OK;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD)
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	84 30       	cpi	r24, 0x04	; 4
    130a:	d8 f5       	brcc	.+118    	; 0x1382 <DIO_enumGetPortValue+0x94>
	{
		switch(Copy_u8PORT)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3e 83       	std	Y+6, r19	; 0x06
    1314:	2d 83       	std	Y+5, r18	; 0x05
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	e1 f0       	breq	.+56     	; 0x1358 <DIO_enumGetPortValue+0x6a>
    1320:	2d 81       	ldd	r18, Y+5	; 0x05
    1322:	3e 81       	ldd	r19, Y+6	; 0x06
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <DIO_enumGetPortValue+0x46>
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 f0       	breq	.+24     	; 0x134a <DIO_enumGetPortValue+0x5c>
    1332:	28 c0       	rjmp	.+80     	; 0x1384 <DIO_enumGetPortValue+0x96>
    1334:	2d 81       	ldd	r18, Y+5	; 0x05
    1336:	3e 81       	ldd	r19, Y+6	; 0x06
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	a1 f0       	breq	.+40     	; 0x1366 <DIO_enumGetPortValue+0x78>
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	b1 f0       	breq	.+44     	; 0x1374 <DIO_enumGetPortValue+0x86>
    1348:	1d c0       	rjmp	.+58     	; 0x1384 <DIO_enumGetPortValue+0x96>
		{
			case DIO_PORTA : * Copy_PtrData = PINA_Register;
    134a:	e9 e3       	ldi	r30, 0x39	; 57
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	eb 81       	ldd	r30, Y+3	; 0x03
    1352:	fc 81       	ldd	r31, Y+4	; 0x04
    1354:	80 83       	st	Z, r24
    1356:	16 c0       	rjmp	.+44     	; 0x1384 <DIO_enumGetPortValue+0x96>
			break;
			case DIO_PORTB : * Copy_PtrData = PINB_Register;
    1358:	e6 e3       	ldi	r30, 0x36	; 54
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	eb 81       	ldd	r30, Y+3	; 0x03
    1360:	fc 81       	ldd	r31, Y+4	; 0x04
    1362:	80 83       	st	Z, r24
    1364:	0f c0       	rjmp	.+30     	; 0x1384 <DIO_enumGetPortValue+0x96>
			break;
			case DIO_PORTC : * Copy_PtrData = PINC_Register;
    1366:	e3 e3       	ldi	r30, 0x33	; 51
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	eb 81       	ldd	r30, Y+3	; 0x03
    136e:	fc 81       	ldd	r31, Y+4	; 0x04
    1370:	80 83       	st	Z, r24
    1372:	08 c0       	rjmp	.+16     	; 0x1384 <DIO_enumGetPortValue+0x96>
			break;
			case DIO_PORTD : * Copy_PtrData = PIND_Register;
    1374:	e0 e3       	ldi	r30, 0x30	; 48
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	eb 81       	ldd	r30, Y+3	; 0x03
    137c:	fc 81       	ldd	r31, Y+4	; 0x04
    137e:	80 83       	st	Z, r24
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <DIO_enumGetPortValue+0x96>
			break;
		}
	}
	else
	{
		Loc_state = DIO_NOK;
    1382:	19 82       	std	Y+1, r1	; 0x01
	}
	return Loc_state;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
}
    1386:	26 96       	adiw	r28, 0x06	; 6
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <DIO_enumTogglePortValue>:
DIO_ErrorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <DIO_enumTogglePortValue+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <DIO_enumTogglePortValue+0x8>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus Loc_state = DIO_OK;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD)
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <DIO_enumTogglePortValue+0x1a>
    13b0:	3f c0       	rjmp	.+126    	; 0x1430 <DIO_enumTogglePortValue+0x98>
	{
		switch(Copy_u8PORT)
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3c 83       	std	Y+4, r19	; 0x04
    13ba:	2b 83       	std	Y+3, r18	; 0x03
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	e9 f0       	breq	.+58     	; 0x1400 <DIO_enumTogglePortValue+0x68>
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <DIO_enumTogglePortValue+0x42>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	61 f0       	breq	.+24     	; 0x13f0 <DIO_enumTogglePortValue+0x58>
    13d8:	2c c0       	rjmp	.+88     	; 0x1432 <DIO_enumTogglePortValue+0x9a>
    13da:	2b 81       	ldd	r18, Y+3	; 0x03
    13dc:	3c 81       	ldd	r19, Y+4	; 0x04
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	b1 f0       	breq	.+44     	; 0x1410 <DIO_enumTogglePortValue+0x78>
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	c9 f0       	breq	.+50     	; 0x1420 <DIO_enumTogglePortValue+0x88>
    13ee:	21 c0       	rjmp	.+66     	; 0x1432 <DIO_enumTogglePortValue+0x9a>
		{
			case DIO_PORTA : PORTA_Register=~PORTA_Register;
    13f0:	ab e3       	ldi	r26, 0x3B	; 59
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	eb e3       	ldi	r30, 0x3B	; 59
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 95       	com	r24
    13fc:	8c 93       	st	X, r24
    13fe:	19 c0       	rjmp	.+50     	; 0x1432 <DIO_enumTogglePortValue+0x9a>
			break;
			case DIO_PORTB : PORTB_Register=~PORTB_Register;
    1400:	a8 e3       	ldi	r26, 0x38	; 56
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e8 e3       	ldi	r30, 0x38	; 56
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	80 95       	com	r24
    140c:	8c 93       	st	X, r24
    140e:	11 c0       	rjmp	.+34     	; 0x1432 <DIO_enumTogglePortValue+0x9a>
			break;
			case DIO_PORTC : PORTC_Register=~PORTC_Register;
    1410:	a5 e3       	ldi	r26, 0x35	; 53
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	80 95       	com	r24
    141c:	8c 93       	st	X, r24
    141e:	09 c0       	rjmp	.+18     	; 0x1432 <DIO_enumTogglePortValue+0x9a>
			break;
			case DIO_PORTD : PORTD_Register=~PORTD_Register;
    1420:	a2 e3       	ldi	r26, 0x32	; 50
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e2 e3       	ldi	r30, 0x32	; 50
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 95       	com	r24
    142c:	8c 93       	st	X, r24
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <DIO_enumTogglePortValue+0x9a>
			break;
		}
	}
	else
	{
		Loc_state = DIO_NOK;
    1430:	19 82       	std	Y+1, r1	; 0x01
	}
	return Loc_state;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <SSD_voidInitializeDataPort>:
#include"SSD_interface.h"

static u8 Local_u8SSDNumbers[10] = SSD_NUMBER_ARR ;
 
void SSD_voidInitializeDataPort  ( SSD_Type Copy_structConfig )
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <SSD_voidInitializeDataPort+0x6>
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPortDirection(Copy_structConfig.DataPort, DIO_PORT_OUTPUT);
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	6f ef       	ldi	r22, 0xFF	; 255
    1454:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <DIO_enumSetPortDirection>
}
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <SSD_voidSendNumber>:

void SSD_voidSendNumber       ( SSD_Type Copy_structConfig , u8 Copy_u8Number )
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <SSD_voidSendNumber+0x6>
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_structConfig.Type == SSD_COMMON_CATHODE)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	88 23       	and	r24, r24
    1478:	69 f4       	brne	.+26     	; 0x1494 <SSD_voidSendNumber+0x32>
	{
		DIO_enumSetPortValue (Copy_structConfig.DataPort, Local_u8SSDNumbers[Copy_u8Number]);
    147a:	2a 81       	ldd	r18, Y+2	; 0x02
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	fc 01       	movw	r30, r24
    1484:	e8 59       	subi	r30, 0x98	; 152
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	90 81       	ld	r25, Z
    148a:	82 2f       	mov	r24, r18
    148c:	69 2f       	mov	r22, r25
    148e:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_enumSetPortValue>
    1492:	11 c0       	rjmp	.+34     	; 0x14b6 <SSD_voidSendNumber+0x54>
	}
	else if(Copy_structConfig.Type == SSD_COMMON_ANODE)
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	71 f4       	brne	.+28     	; 0x14b6 <SSD_voidSendNumber+0x54>
	{
		DIO_enumSetPortValue (Copy_structConfig.DataPort, ~(Local_u8SSDNumbers[Copy_u8Number]));
    149a:	2a 81       	ldd	r18, Y+2	; 0x02
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	fc 01       	movw	r30, r24
    14a4:	e8 59       	subi	r30, 0x98	; 152
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 81       	ld	r24, Z
    14aa:	98 2f       	mov	r25, r24
    14ac:	90 95       	com	r25
    14ae:	82 2f       	mov	r24, r18
    14b0:	69 2f       	mov	r22, r25
    14b2:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_enumSetPortValue>
	}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <SW_voidInit>:
#include"SW_config.h"
#include"SW_private.h"
#include"SW_interface.h"

void SW_voidInit       ( SW_Type SW_Config )
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <SW_voidInit+0x6>
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	69 83       	std	Y+1, r22	; 0x01
    14d0:	7a 83       	std	Y+2, r23	; 0x02
    14d2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection (SW_Config.port , SW_Config.pin , DIO_PIN_INPUT);
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	69 2f       	mov	r22, r25
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enumSetPinDirection>
	if(SW_Config.pullstate == SW_Int_PULL_UP)
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	88 23       	and	r24, r24
    14e4:	31 f4       	brne	.+12     	; 0x14f2 <SW_voidInit+0x30>
	{
		DIO_enumSetPinValue (SW_Config.port, SW_Config.pin, DIO_PIN_HIGH );
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	69 2f       	mov	r22, r25
    14ec:	41 e0       	ldi	r20, 0x01	; 1
    14ee:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
	}
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <SW_u8IsPressed>:
u8   SW_u8IsPressed   ( SW_Type SW_Config )
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <SW_u8IsPressed+0x6>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <SW_u8IsPressed+0x8>
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	6b 83       	std	Y+3, r22	; 0x03
    150e:	7c 83       	std	Y+4, r23	; 0x04
    1510:	8d 83       	std	Y+5, r24	; 0x05
	u8 loc_pinvalue = SW_NOT_PRESSED;
    1512:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_pressedOrNot = SW_NOT_PRESSED;
    1514:	19 82       	std	Y+1, r1	; 0x01
	if(SW_Config.pullstate == SW_Int_PULL_UP || SW_Config.pullstate == SW_Ext_PULL_UP)
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	88 23       	and	r24, r24
    151a:	19 f0       	breq	.+6      	; 0x1522 <SW_u8IsPressed+0x24>
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	a1 f4       	brne	.+40     	; 0x154a <SW_u8IsPressed+0x4c>
	{
		DIO_enumGetPinValue (SW_Config.port , SW_Config.pin , & loc_pinvalue );
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	9e 01       	movw	r18, r28
    1528:	2e 5f       	subi	r18, 0xFE	; 254
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	69 2f       	mov	r22, r25
    152e:	a9 01       	movw	r20, r18
    1530:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_enumGetPinValue>
		if(loc_pinvalue == 0)
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	88 23       	and	r24, r24
    1538:	19 f4       	brne	.+6      	; 0x1540 <SW_u8IsPressed+0x42>
		{
			loc_pressedOrNot = SW_PRESSED;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	1b c0       	rjmp	.+54     	; 0x1576 <SW_u8IsPressed+0x78>
		}
		else if(loc_pinvalue == 1)
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	c1 f4       	brne	.+48     	; 0x1576 <SW_u8IsPressed+0x78>
		{
			loc_pressedOrNot = SW_NOT_PRESSED;
    1546:	19 82       	std	Y+1, r1	; 0x01
    1548:	16 c0       	rjmp	.+44     	; 0x1576 <SW_u8IsPressed+0x78>
		}
	}
	else if (SW_Config.pullstate == SW_Ext_PULL_DOWN)
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	99 f4       	brne	.+38     	; 0x1576 <SW_u8IsPressed+0x78>
	{
		DIO_enumGetPinValue (SW_Config.port , SW_Config.pin , & loc_pinvalue );
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	9e 01       	movw	r18, r28
    1556:	2e 5f       	subi	r18, 0xFE	; 254
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	69 2f       	mov	r22, r25
    155c:	a9 01       	movw	r20, r18
    155e:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_enumGetPinValue>
		if(loc_pinvalue == 1)
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	19 f4       	brne	.+6      	; 0x156e <SW_u8IsPressed+0x70>
		{
			loc_pressedOrNot = SW_PRESSED;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <SW_u8IsPressed+0x78>
		}
		else if(loc_pinvalue == 0)
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	88 23       	and	r24, r24
    1572:	09 f4       	brne	.+2      	; 0x1576 <SW_u8IsPressed+0x78>
		{
			loc_pressedOrNot = SW_NOT_PRESSED;
    1574:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	
	return loc_pressedOrNot;
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <init_interrupts>:

SSD_Type loc_structleftssd = {SSD_COMMON_CATHODE , DIO_PORTB};
SSD_Type loc_structrightssd = {SSD_COMMON_CATHODE , DIO_PORTA};


void init_interrupts() {
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62

    // Configure INT0 (for PD2) to trigger on falling edge
    MCUCR |= (1 << ISC01);  // Falling edge
    1590:	a5 e5       	ldi	r26, 0x55	; 85
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e5 e5       	ldi	r30, 0x55	; 85
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	82 60       	ori	r24, 0x02	; 2
    159c:	8c 93       	st	X, r24
    MCUCR &= ~(1 << ISC00); // Falling edge
    159e:	a5 e5       	ldi	r26, 0x55	; 85
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e5       	ldi	r30, 0x55	; 85
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8e 7f       	andi	r24, 0xFE	; 254
    15aa:	8c 93       	st	X, r24

    // Configure INT1 (for PD3) to trigger on falling edge
    MCUCR |= (1 << ISC11);  // Falling edge
    15ac:	a5 e5       	ldi	r26, 0x55	; 85
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e5       	ldi	r30, 0x55	; 85
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	88 60       	ori	r24, 0x08	; 8
    15b8:	8c 93       	st	X, r24
    MCUCR &= ~(1 << ISC10); // Falling edge
    15ba:	a5 e5       	ldi	r26, 0x55	; 85
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e5 e5       	ldi	r30, 0x55	; 85
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8b 7f       	andi	r24, 0xFB	; 251
    15c6:	8c 93       	st	X, r24

    // Enable INT0 and INT1 external interrupts
    GICR |= (1 << INT0) | (1 << INT1);
    15c8:	ab e5       	ldi	r26, 0x5B	; 91
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	eb e5       	ldi	r30, 0x5B	; 91
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	80 6c       	ori	r24, 0xC0	; 192
    15d4:	8c 93       	st	X, r24

    // Enable global interrupts
    sei();
    15d6:	78 94       	sei
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <__vector_1>:

ISR(INT0_vect) {
    15de:	1f 92       	push	r1
    15e0:	0f 92       	push	r0
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	0f 92       	push	r0
    15e6:	11 24       	eor	r1, r1
    15e8:	2f 93       	push	r18
    15ea:	3f 93       	push	r19
    15ec:	4f 93       	push	r20
    15ee:	5f 93       	push	r21
    15f0:	6f 93       	push	r22
    15f2:	7f 93       	push	r23
    15f4:	8f 93       	push	r24
    15f6:	9f 93       	push	r25
    15f8:	af 93       	push	r26
    15fa:	bf 93       	push	r27
    15fc:	ef 93       	push	r30
    15fe:	ff 93       	push	r31
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	2e 97       	sbiw	r28, 0x0e	; 14
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	aa e7       	ldi	r26, 0x7A	; 122
    1614:	b4 e4       	ldi	r27, 0x44	; 68
    1616:	8b 87       	std	Y+11, r24	; 0x0b
    1618:	9c 87       	std	Y+12, r25	; 0x0c
    161a:	ad 87       	std	Y+13, r26	; 0x0d
    161c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1620:	7c 85       	ldd	r23, Y+12	; 0x0c
    1622:	8d 85       	ldd	r24, Y+13	; 0x0d
    1624:	9e 85       	ldd	r25, Y+14	; 0x0e
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	4a ef       	ldi	r20, 0xFA	; 250
    162c:	54 e4       	ldi	r21, 0x44	; 68
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	8f 83       	std	Y+7, r24	; 0x07
    1638:	98 87       	std	Y+8, r25	; 0x08
    163a:	a9 87       	std	Y+9, r26	; 0x09
    163c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    163e:	6f 81       	ldd	r22, Y+7	; 0x07
    1640:	78 85       	ldd	r23, Y+8	; 0x08
    1642:	89 85       	ldd	r24, Y+9	; 0x09
    1644:	9a 85       	ldd	r25, Y+10	; 0x0a
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e8       	ldi	r20, 0x80	; 128
    164c:	5f e3       	ldi	r21, 0x3F	; 63
    164e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1652:	88 23       	and	r24, r24
    1654:	2c f4       	brge	.+10     	; 0x1660 <__vector_1+0x82>
		__ticks = 1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	3f c0       	rjmp	.+126    	; 0x16de <__vector_1+0x100>
	else if (__tmp > 65535)
    1660:	6f 81       	ldd	r22, Y+7	; 0x07
    1662:	78 85       	ldd	r23, Y+8	; 0x08
    1664:	89 85       	ldd	r24, Y+9	; 0x09
    1666:	9a 85       	ldd	r25, Y+10	; 0x0a
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	3f ef       	ldi	r19, 0xFF	; 255
    166c:	4f e7       	ldi	r20, 0x7F	; 127
    166e:	57 e4       	ldi	r21, 0x47	; 71
    1670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1674:	18 16       	cp	r1, r24
    1676:	4c f5       	brge	.+82     	; 0x16ca <__vector_1+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1678:	6b 85       	ldd	r22, Y+11	; 0x0b
    167a:	7c 85       	ldd	r23, Y+12	; 0x0c
    167c:	8d 85       	ldd	r24, Y+13	; 0x0d
    167e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e2       	ldi	r20, 0x20	; 32
    1686:	51 e4       	ldi	r21, 0x41	; 65
    1688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	bc 01       	movw	r22, r24
    1692:	cd 01       	movw	r24, r26
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	0f c0       	rjmp	.+30     	; 0x16c0 <__vector_1+0xe2>
    16a2:	88 ec       	ldi	r24, 0xC8	; 200
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9c 83       	std	Y+4, r25	; 0x04
    16a8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <__vector_1+0xd0>
    16b2:	9c 83       	std	Y+4, r25	; 0x04
    16b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	9e 83       	std	Y+6, r25	; 0x06
    16be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	69 f7       	brne	.-38     	; 0x16a2 <__vector_1+0xc4>
    16c8:	14 c0       	rjmp	.+40     	; 0x16f2 <__vector_1+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <__vector_1+0x10c>
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    16f2:	2e 96       	adiw	r28, 0x0e	; 14
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	ff 91       	pop	r31
    16fe:	ef 91       	pop	r30
    1700:	bf 91       	pop	r27
    1702:	af 91       	pop	r26
    1704:	9f 91       	pop	r25
    1706:	8f 91       	pop	r24
    1708:	7f 91       	pop	r23
    170a:	6f 91       	pop	r22
    170c:	5f 91       	pop	r21
    170e:	4f 91       	pop	r20
    1710:	3f 91       	pop	r19
    1712:	2f 91       	pop	r18
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <__vector_2>:

ISR(INT1_vect) {
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	2e 97       	sbiw	r28, 0x0e	; 14
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	cd bf       	out	0x3d, r28	; 61
	global_counter_leftssd =0;
    174e:	10 92 7d 00 	sts	0x007D, r1
	global_counter_rightssd=0;
    1752:	10 92 7c 00 	sts	0x007C, r1
	SSD_voidSendNumber( loc_structleftssd , global_counter_leftssd );
    1756:	20 91 7d 00 	lds	r18, 0x007D
    175a:	80 91 72 00 	lds	r24, 0x0072
    175e:	90 91 73 00 	lds	r25, 0x0073
    1762:	62 2f       	mov	r22, r18
    1764:	0e 94 31 0a 	call	0x1462	; 0x1462 <SSD_voidSendNumber>
	SSD_voidSendNumber( loc_structrightssd , global_counter_rightssd );
    1768:	20 91 7c 00 	lds	r18, 0x007C
    176c:	80 91 7a 00 	lds	r24, 0x007A
    1770:	90 91 7b 00 	lds	r25, 0x007B
    1774:	62 2f       	mov	r22, r18
    1776:	0e 94 31 0a 	call	0x1462	; 0x1462 <SSD_voidSendNumber>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a8 ec       	ldi	r26, 0xC8	; 200
    1780:	b2 e4       	ldi	r27, 0x42	; 66
    1782:	8b 87       	std	Y+11, r24	; 0x0b
    1784:	9c 87       	std	Y+12, r25	; 0x0c
    1786:	ad 87       	std	Y+13, r26	; 0x0d
    1788:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178a:	6b 85       	ldd	r22, Y+11	; 0x0b
    178c:	7c 85       	ldd	r23, Y+12	; 0x0c
    178e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1790:	9e 85       	ldd	r25, Y+14	; 0x0e
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a ef       	ldi	r20, 0xFA	; 250
    1798:	54 e4       	ldi	r21, 0x44	; 68
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8f 83       	std	Y+7, r24	; 0x07
    17a4:	98 87       	std	Y+8, r25	; 0x08
    17a6:	a9 87       	std	Y+9, r26	; 0x09
    17a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17aa:	6f 81       	ldd	r22, Y+7	; 0x07
    17ac:	78 85       	ldd	r23, Y+8	; 0x08
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e8       	ldi	r20, 0x80	; 128
    17b8:	5f e3       	ldi	r21, 0x3F	; 63
    17ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17be:	88 23       	and	r24, r24
    17c0:	2c f4       	brge	.+10     	; 0x17cc <__vector_2+0xae>
		__ticks = 1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	3f c0       	rjmp	.+126    	; 0x184a <__vector_2+0x12c>
	else if (__tmp > 65535)
    17cc:	6f 81       	ldd	r22, Y+7	; 0x07
    17ce:	78 85       	ldd	r23, Y+8	; 0x08
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	57 e4       	ldi	r21, 0x47	; 71
    17dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	4c f5       	brge	.+82     	; 0x1836 <__vector_2+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e2       	ldi	r20, 0x20	; 32
    17f2:	51 e4       	ldi	r21, 0x41	; 65
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9e 83       	std	Y+6, r25	; 0x06
    180a:	8d 83       	std	Y+5, r24	; 0x05
    180c:	0f c0       	rjmp	.+30     	; 0x182c <__vector_2+0x10e>
    180e:	88 ec       	ldi	r24, 0xC8	; 200
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	8b 83       	std	Y+3, r24	; 0x03
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <__vector_2+0xfc>
    181e:	9c 83       	std	Y+4, r25	; 0x04
    1820:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	69 f7       	brne	.-38     	; 0x180e <__vector_2+0xf0>
    1834:	14 c0       	rjmp	.+40     	; 0x185e <__vector_2+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1836:	6f 81       	ldd	r22, Y+7	; 0x07
    1838:	78 85       	ldd	r23, Y+8	; 0x08
    183a:	89 85       	ldd	r24, Y+9	; 0x09
    183c:	9a 85       	ldd	r25, Y+10	; 0x0a
    183e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <__vector_2+0x138>
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    185e:	2e 96       	adiw	r28, 0x0e	; 14
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	7f 91       	pop	r23
    1876:	6f 91       	pop	r22
    1878:	5f 91       	pop	r21
    187a:	4f 91       	pop	r20
    187c:	3f 91       	pop	r19
    187e:	2f 91       	pop	r18
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	0f 90       	pop	r0
    1886:	1f 90       	pop	r1
    1888:	18 95       	reti

0000188a <main>:

void main()
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	6e 97       	sbiw	r28, 0x1e	; 30
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
	SSD_voidInitializeDataPort  ( loc_structleftssd );
    189e:	80 91 72 00 	lds	r24, 0x0072
    18a2:	90 91 73 00 	lds	r25, 0x0073
    18a6:	0e 94 21 0a 	call	0x1442	; 0x1442 <SSD_voidInitializeDataPort>
	SSD_voidInitializeDataPort  ( loc_structrightssd );
    18aa:	80 91 7a 00 	lds	r24, 0x007A
    18ae:	90 91 7b 00 	lds	r25, 0x007B
    18b2:	0e 94 21 0a 	call	0x1442	; 0x1442 <SSD_voidInitializeDataPort>

	SW_Type loc_structpauseSW = {DIO_PORTD , DIO_PIN2 , SW_Int_PULL_UP};
    18b6:	ce 01       	movw	r24, r28
    18b8:	0f 96       	adiw	r24, 0x0f	; 15
    18ba:	9e 8b       	std	Y+22, r25	; 0x16
    18bc:	8d 8b       	std	Y+21, r24	; 0x15
    18be:	e7 e7       	ldi	r30, 0x77	; 119
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	f8 8f       	std	Y+24, r31	; 0x18
    18c4:	ef 8b       	std	Y+23, r30	; 0x17
    18c6:	f3 e0       	ldi	r31, 0x03	; 3
    18c8:	f9 8f       	std	Y+25, r31	; 0x19
    18ca:	ef 89       	ldd	r30, Y+23	; 0x17
    18cc:	f8 8d       	ldd	r31, Y+24	; 0x18
    18ce:	00 80       	ld	r0, Z
    18d0:	8f 89       	ldd	r24, Y+23	; 0x17
    18d2:	98 8d       	ldd	r25, Y+24	; 0x18
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	98 8f       	std	Y+24, r25	; 0x18
    18d8:	8f 8b       	std	Y+23, r24	; 0x17
    18da:	ed 89       	ldd	r30, Y+21	; 0x15
    18dc:	fe 89       	ldd	r31, Y+22	; 0x16
    18de:	00 82       	st	Z, r0
    18e0:	8d 89       	ldd	r24, Y+21	; 0x15
    18e2:	9e 89       	ldd	r25, Y+22	; 0x16
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	9e 8b       	std	Y+22, r25	; 0x16
    18e8:	8d 8b       	std	Y+21, r24	; 0x15
    18ea:	99 8d       	ldd	r25, Y+25	; 0x19
    18ec:	91 50       	subi	r25, 0x01	; 1
    18ee:	99 8f       	std	Y+25, r25	; 0x19
    18f0:	e9 8d       	ldd	r30, Y+25	; 0x19
    18f2:	ee 23       	and	r30, r30
    18f4:	51 f7       	brne	.-44     	; 0x18ca <main+0x40>
	SW_Type loc_structresetSW = {DIO_PORTD , DIO_PIN3 , SW_Int_PULL_UP};
    18f6:	ce 01       	movw	r24, r28
    18f8:	42 96       	adiw	r24, 0x12	; 18
    18fa:	9b 8f       	std	Y+27, r25	; 0x1b
    18fc:	8a 8f       	std	Y+26, r24	; 0x1a
    18fe:	e4 e7       	ldi	r30, 0x74	; 116
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	fd 8f       	std	Y+29, r31	; 0x1d
    1904:	ec 8f       	std	Y+28, r30	; 0x1c
    1906:	f3 e0       	ldi	r31, 0x03	; 3
    1908:	fe 8f       	std	Y+30, r31	; 0x1e
    190a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    190c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    190e:	00 80       	ld	r0, Z
    1910:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1912:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	9d 8f       	std	Y+29, r25	; 0x1d
    1918:	8c 8f       	std	Y+28, r24	; 0x1c
    191a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    191c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    191e:	00 82       	st	Z, r0
    1920:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1922:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	9b 8f       	std	Y+27, r25	; 0x1b
    1928:	8a 8f       	std	Y+26, r24	; 0x1a
    192a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    192c:	91 50       	subi	r25, 0x01	; 1
    192e:	9e 8f       	std	Y+30, r25	; 0x1e
    1930:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1932:	ee 23       	and	r30, r30
    1934:	51 f7       	brne	.-44     	; 0x190a <main+0x80>

	SW_voidInit       ( loc_structpauseSW );
    1936:	6f 85       	ldd	r22, Y+15	; 0x0f
    1938:	78 89       	ldd	r23, Y+16	; 0x10
    193a:	89 89       	ldd	r24, Y+17	; 0x11
    193c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <SW_voidInit>
	SW_voidInit       ( loc_structresetSW );
    1940:	6a 89       	ldd	r22, Y+18	; 0x12
    1942:	7b 89       	ldd	r23, Y+19	; 0x13
    1944:	8c 89       	ldd	r24, Y+20	; 0x14
    1946:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <SW_voidInit>

	init_interrupts();
    194a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <init_interrupts>

	while(1)
	{
		for(global_counter_leftssd = 0 ; global_counter_leftssd < 10 ; global_counter_leftssd++)
    194e:	10 92 7d 00 	sts	0x007D, r1
    1952:	96 c0       	rjmp	.+300    	; 0x1a80 <main+0x1f6>
		{
			SSD_voidSendNumber( loc_structleftssd , global_counter_leftssd );
    1954:	20 91 7d 00 	lds	r18, 0x007D
    1958:	80 91 72 00 	lds	r24, 0x0072
    195c:	90 91 73 00 	lds	r25, 0x0073
    1960:	62 2f       	mov	r22, r18
    1962:	0e 94 31 0a 	call	0x1462	; 0x1462 <SSD_voidSendNumber>
			for(global_counter_rightssd = 0 ; global_counter_rightssd < 10 ; global_counter_rightssd++)
    1966:	10 92 7c 00 	sts	0x007C, r1
    196a:	80 c0       	rjmp	.+256    	; 0x1a6c <main+0x1e2>
			{
				SSD_voidSendNumber( loc_structrightssd , global_counter_rightssd );
    196c:	20 91 7c 00 	lds	r18, 0x007C
    1970:	80 91 7a 00 	lds	r24, 0x007A
    1974:	90 91 7b 00 	lds	r25, 0x007B
    1978:	62 2f       	mov	r22, r18
    197a:	0e 94 31 0a 	call	0x1462	; 0x1462 <SSD_voidSendNumber>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a8 ec       	ldi	r26, 0xC8	; 200
    1984:	b2 e4       	ldi	r27, 0x42	; 66
    1986:	8b 87       	std	Y+11, r24	; 0x0b
    1988:	9c 87       	std	Y+12, r25	; 0x0c
    198a:	ad 87       	std	Y+13, r26	; 0x0d
    198c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1990:	7c 85       	ldd	r23, Y+12	; 0x0c
    1992:	8d 85       	ldd	r24, Y+13	; 0x0d
    1994:	9e 85       	ldd	r25, Y+14	; 0x0e
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a ef       	ldi	r20, 0xFA	; 250
    199c:	54 e4       	ldi	r21, 0x44	; 68
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8f 83       	std	Y+7, r24	; 0x07
    19a8:	98 87       	std	Y+8, r25	; 0x08
    19aa:	a9 87       	std	Y+9, r26	; 0x09
    19ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ae:	6f 81       	ldd	r22, Y+7	; 0x07
    19b0:	78 85       	ldd	r23, Y+8	; 0x08
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <main+0x146>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9e 83       	std	Y+6, r25	; 0x06
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <main+0x1c4>
	else if (__tmp > 65535)
    19d0:	6f 81       	ldd	r22, Y+7	; 0x07
    19d2:	78 85       	ldd	r23, Y+8	; 0x08
    19d4:	89 85       	ldd	r24, Y+9	; 0x09
    19d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <main+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <main+0x1a6>
    1a12:	88 ec       	ldi	r24, 0xC8	; 200
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9c 83       	std	Y+4, r25	; 0x04
    1a18:	8b 83       	std	Y+3, r24	; 0x03
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <main+0x194>
    1a22:	9c 83       	std	Y+4, r25	; 0x04
    1a24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	9e 83       	std	Y+6, r25	; 0x06
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	9e 81       	ldd	r25, Y+6	; 0x06
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <main+0x188>
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <main+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3c:	78 85       	ldd	r23, Y+8	; 0x08
    1a3e:	89 85       	ldd	r24, Y+9	; 0x09
    1a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
    1a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a50:	9e 81       	ldd	r25, Y+6	; 0x06
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <main+0x1d0>
    1a5e:	9a 83       	std	Y+2, r25	; 0x02
    1a60:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		for(global_counter_leftssd = 0 ; global_counter_leftssd < 10 ; global_counter_leftssd++)
		{
			SSD_voidSendNumber( loc_structleftssd , global_counter_leftssd );
			for(global_counter_rightssd = 0 ; global_counter_rightssd < 10 ; global_counter_rightssd++)
    1a62:	80 91 7c 00 	lds	r24, 0x007C
    1a66:	8f 5f       	subi	r24, 0xFF	; 255
    1a68:	80 93 7c 00 	sts	0x007C, r24
    1a6c:	80 91 7c 00 	lds	r24, 0x007C
    1a70:	8a 30       	cpi	r24, 0x0A	; 10
    1a72:	08 f4       	brcc	.+2      	; 0x1a76 <main+0x1ec>
    1a74:	7b cf       	rjmp	.-266    	; 0x196c <main+0xe2>

	init_interrupts();

	while(1)
	{
		for(global_counter_leftssd = 0 ; global_counter_leftssd < 10 ; global_counter_leftssd++)
    1a76:	80 91 7d 00 	lds	r24, 0x007D
    1a7a:	8f 5f       	subi	r24, 0xFF	; 255
    1a7c:	80 93 7d 00 	sts	0x007D, r24
    1a80:	80 91 7d 00 	lds	r24, 0x007D
    1a84:	8a 30       	cpi	r24, 0x0A	; 10
    1a86:	08 f4       	brcc	.+2      	; 0x1a8a <main+0x200>
    1a88:	65 cf       	rjmp	.-310    	; 0x1954 <main+0xca>
    1a8a:	61 cf       	rjmp	.-318    	; 0x194e <main+0xc4>

00001a8c <__prologue_saves__>:
    1a8c:	2f 92       	push	r2
    1a8e:	3f 92       	push	r3
    1a90:	4f 92       	push	r4
    1a92:	5f 92       	push	r5
    1a94:	6f 92       	push	r6
    1a96:	7f 92       	push	r7
    1a98:	8f 92       	push	r8
    1a9a:	9f 92       	push	r9
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	ca 1b       	sub	r28, r26
    1ab6:	db 0b       	sbc	r29, r27
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	09 94       	ijmp

00001ac4 <__epilogue_restores__>:
    1ac4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ac6:	39 88       	ldd	r3, Y+17	; 0x11
    1ac8:	48 88       	ldd	r4, Y+16	; 0x10
    1aca:	5f 84       	ldd	r5, Y+15	; 0x0f
    1acc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ace:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ad0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ad2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ad4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ad6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ad8:	c8 84       	ldd	r12, Y+8	; 0x08
    1ada:	df 80       	ldd	r13, Y+7	; 0x07
    1adc:	ee 80       	ldd	r14, Y+6	; 0x06
    1ade:	fd 80       	ldd	r15, Y+5	; 0x05
    1ae0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ae2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ae4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ae6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ae8:	ce 0f       	add	r28, r30
    1aea:	d1 1d       	adc	r29, r1
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	ed 01       	movw	r28, r26
    1af8:	08 95       	ret

00001afa <_exit>:
    1afa:	f8 94       	cli

00001afc <__stop_program>:
    1afc:	ff cf       	rjmp	.-2      	; 0x1afc <__stop_program>
